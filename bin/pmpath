#!perl

use 5.010;
use strict;
use warnings;

use App::PMUtils;
use Perinci::CmdLine 1.13;
use SHARYANTO::Module::Path;

# DATE
# VERSION

our %SPEC;
$SPEC{pmpath} = {
    v => 1.1,
    summary => 'Get path to locally installed Perl module',
    args => {
        module => {
            schema => ['array*', of=>'str*', min_len=>1],
            req    => 1,
            pos    => 0,
            greedy => 1,
            element_completion => $App::PMUtils::_complete_module,
        },
        all => {
            schema => 'bool',
            cmdline_aliases => {a=>{}},
        },
        abs => {
            schema => 'bool',
            cmdline_aliases => {P=>{}},
        },
    },
    "x.perinci.cmdline.default_format" => 'text-simple',
};
sub pmpath {
    require SHARYANTO::Module::Path;
    my %args = @_;

    my $mods = $args{module};
    my $res = [];
    my $found;

    for my $mod (@{$mods}) {
        my $mpath = SHARYANTO::Module::Path::module_path(
            module=>$mod, find_pmc=>0, find_pod=>0, find_prefix=>1,
            abs=>$args{abs}, all=>$args{all});
        $found++ if $mpath;
        push @$res, @$mods > 1 ? {module=>$mod, path=>$mpath} : $mpath;
    }

    if ($found) {
        [200, "OK", $res];
    } else {
        [404, "No such module"];
    }
}

Perinci::CmdLine->new(
    log_any_app => 0,
    url => '/main/pmpath',
)->run;

# ABSTRACT: Get path to locally installed Perl module
# PODNAME: pmpath

=head1 SYNOPSIS

Basic usage:

 % pmpath Some::Module

Find all modules (-a), return absolute paths (-P):

 % pmpath -a Some::Module

See all other options:

 % pmpath --help

To active bash completion:

 % complete -C pmpath pmpath ; # can be put in bash startup file e.g. .bashrc
 % pmpath Some<tab>
 % pmpath test/builder/mo<tab> ; # resolve to Test/Builder/Module, can resolve case
 % pmpath "Text::Abb<tab>      ; # use quote (' or ") if you want to use :: as separator

