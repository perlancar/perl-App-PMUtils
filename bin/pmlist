#!perl

# DATE
# VERSION

use 5.010;
use strict;
use warnings;

use App::PMUtils;
use Perinci::CmdLine::Any;

our %SPEC;
$SPEC{pmlist} = {
    v => 1.1,
    summary => 'List Perl modules (and PODs, and module prefixes)',
    description => <<'_',

This is basically a CLI interface to `Module::List`, with tab completion.

_
    args => {
        query => {
            schema  => 'str*',
            default => '',
            pos     => 0,
            completion => sub {
                require Complete::Module;
                my %args = @_;
                Complete::Module::complete_module(word=>$args{word});
            },
            tags => ['category:filtering'],
        },
        pm => {
            schema  => 'bool',
            default => 1,
            tags => ['category:filtering'],
        },
        pod => {
            schema  => 'bool',
            default => 0,
            tags => ['category:filtering'],
        },
        prefix => {
            schema  => 'bool',
            default => 0,
            tags => ['category:filtering'],
        },
        recursive => {
            schema  => 'bool',
            cmdline_aliases => { recurse => {}, r => {} },
        },
    },
};
sub pmlist {
    require Module::List;
    my %args = @_;

    my $query = $args{query} // "";
    $query =~ s!/!::!g; # convenience

    # i wonder why Module::List is not more forgiving
    $query .= "::" unless !length($query) || $query =~ /::\z/;

    my $mods = Module::List::list_modules(
        $query,
        {
            list_prefixes => $args{prefix},
            list_modules  => $args{pm},
            list_pod      => $args{pod},
            recurse       => $args{recursive},
        });
    my @res;
    for (sort keys %$mods) {
        push @res, $_;
    }
    [200, "OK", \@res];
}

Perinci::CmdLine::Any->new(
    url => '/main/pmlist',
)->run;

# ABSTRACT:
# PODNAME:

=head1 SYNOPSIS

Basic usage:

 % pmlist Text::
