#!perl

use 5.010;
use strict;
use warnings;
use Log::Any '$log';

use App::PMUtils;
use Perinci::CmdLine::Lite;

# DATE
# VERSION

our %SPEC;
$SPEC{pmversion} = {
    v => 1.1,
    summary => 'Get Perl module version',
    description => <<'_',
_
    args => {
        module => {
            schema => ['array*' => of => 'str*', min_len=>1],
            req => 1,
            pos => 0,
            greedy => 1,
            element_completion => $App::PMUtils::_complete_module,
        },
    },
    "x.perinci.cmdline.default_format" => 'text-simple',
};
sub pmversion {
    require Module::Load;
    require SHARYANTO::Module::Path;

    my %args = @_;
    my $mods = $args{module};

    my $found;
    my $res = [];
    for my $mod (@$mods) {
        $mod =~ s!/!::!g;
        my $mpath = SHARYANTO::Module::Path::module_path(module=>$mod);
        unless ($mpath) {
            push @$res, "Module $mod is not installed";
            next;
        }
        $found++;
        # load to get $VERSION & $DATE
        {
            no strict 'refs';
            Module::Load::load($mod);
            my $v = ${"$mod\::VERSION"};
            if (defined $v) {
                push @$res, (@$mods > 1 ? "$mod $v" : $v);
            } else {
                push @$res, "Module $mod does not define \$VERSION";
            }
        }
    }

    if (!$found) {
        [404, "No such module(s): " . join(", ", @$mods)];
    } else {
        [200, "OK", $res];
    }
}

Perinci::CmdLine::Lite->new(
    url => '/main/pmversion',
)->run;

# ABSTRACT: Get Perl module version
# PODNAME: pmversion

=head1 SYNOPSIS

 % pmversion Some::Module Another::Module

To active bash completion:

 % complete -C pmversion pmversion ; # can be put in bash startup file e.g. .bashrc
 % pmversion Some<tab>
 % pmversion test/builder/mo<tab> ; # resolve to Test/Builder/Module, can resolve case
 % pmversion "Text::Abb<tab>      ; # use quote (' or ") if you want to use :: as separator


=head1 SEE ALSO

L<pminfo>

