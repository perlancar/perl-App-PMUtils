#!perl

use 5.010;
use strict;
use warnings;

use App::PMUtils;
use Perinci::CmdLine::Any -prefer_lite=>1;

# DATE
# VERSION

our %SPEC;
$SPEC{pmdoc} = {
    v => 1.1,
    summary => 'Show documentation of Perl module',
    description => <<'_',

This function executes `perldoc`. Basically what it offers is command-line
completion.

_
    args => {
        module => {
            schema => 'str*',
            req => 1,
            pos => 0,
            completion => $App::PMUtils::_complete_module,
        },
    },
    deps => {
        prog => 'perldoc',
    },
};
sub pmdoc {
    my %args = @_;
    my $mod = $args{module};
    $mod =~ s!/!::!g;
    my @cmd = ("perldoc", $mod);
    exec @cmd;
    # [200]; # unreachable
}

Perinci::CmdLine::Any->new(
    url => '/main/pmdoc',
)->run;

# ABSTRACT: Show documentation of Perl module
# PODNAME: pmdoc

=head1 SYNOPSIS

Basic usage:

 % pmdoc Some::Module

To active bash completion:

 % complete -C pmdoc pmdoc ; # can be put in bash startup file e.g. .bashrc
 % pmdoc Some<tab>
 % pmdoc test/builder/mo<tab> ; # resolve to Test/Builder/Module, can resolve case
 % pmdoc "Text::Abb<tab>      ; # use quote (' or ") if you want to use :: as separator
