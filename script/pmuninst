#!perl

use 5.010;
use strict;
use warnings;
use Log::ger;

use App::PMUtils;
use File::Which;
use IO::Prompt::I18N qw(confirm);
use Module::Path::More qw(module_path);
use IPC::System::Options qw(readpipe);
use Perinci::CmdLine::Any;

# AUTHORITY
# DATE
# DIST
# VERSION

our %SPEC;
$SPEC{pmuninst} = {
    v => 1.1,
    summary => 'Uninstall an installed Perl module (using cpanm --uninstall)',
    args => {
        module => $App::PMUtils::arg_module_multiple,
        uninstall_rdeps => {
            schema => 'bool',
            summary => 'Also uninstall dists which depends on the module(s) being uninstalled',
            cmdline_aliases => {R=>{}},
        },
        confirm_yes => {
            schema => ['bool', is=>1],
            cmdline_aliases => {y=>{}},
        },
    },
    deps => {
        prog => 'cpanm',
    },
};
sub pmuninst {
    use experimental 'smartmatch';

    my %args = @_;
    my $mods = $args{module};

    my $lcpan_is_available;
    my @rmods;
    {
        last unless which "lcpan";
        $lcpan_is_available++;
        require JSON::MaybeXS;
        my $lrres = readpipe(
            {log=>1, die=>1},
            "lcpan", "rdeps", "--phase", "ALL", "--rel", "requires", "--json",
            "-l", 2, # limit to this level for now, for speed
            "--no-naked-res",
            @$mods
        );
        $lrres = JSON::MaybeXS->new->decode($lrres);
        for (@{ $lrres->[2] }) {
            my $mod = $_->{dist}; $mod =~ s/^\s+//; $mod =~ s/-/::/g;
            next unless module_path(module=>$mod);
            push @rmods, $mod unless $mod ~~ @$mods;
        }
        @rmods = sort @rmods;
    }

    if ($args{uninstall_rdeps}) {
        return [412, "lcpan is required to find reverse deps"]
            unless $lcpan_is_available;
        if (@rmods && !$args{confirm_yes}) {
            return [200, "Cancelled"] unless
                confirm("These modules will also be uninstalled: ".
                        join(", ", @rmods) . ", are you sure?");
        }
        push @$mods, @rmods;
    } else {
        print "Warning: The following module(s) depend on ".
            (@$mods > 1 ? "(".join(", ", @$mods).")" : $mods->[0]).
            " and may not work aftewards: ".join(", ", @rmods)."\n\n"
            if @rmods;
    }

    for my $mod (@$mods) {
        $mod =~ s/\.pm$//; $mod =~ s!/!::!g; # convenience
        system(
            "cpanm", "--uninstall",
            ($args{confirm_yes} ? ("-f") : ()),
            $mod,
        );
    }
    [200, "OK"]; # XXX check/accumulate success status
}

Perinci::CmdLine::Any->new(
    url => '/main/pmuninst',
    read_config => 0,
    read_env => 0,
)->run;

# ABSTRACT:
# PODNAME:

=head1 SYNOPSIS

 % pmuninst App::Stopwatch


=head1 SEE ALSO

L<pm-uninstall> from L<App::pmuninstall>
