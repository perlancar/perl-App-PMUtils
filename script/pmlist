#!perl

use 5.010;
use strict;
use warnings;

use App::PMUtils;
use Perinci::CmdLine::Any;

# AUTHORITY
# DATE
# DIST
# VERSION

our %SPEC;
$SPEC{pmlist} = {
    v => 1.1,
    summary => 'List Perl modules (and PODs, and module prefixes)',
    description => <<'_',

This is basically a CLI interface to <pm:Module::List::More>, with tab
completion.

_
    args => {
        query => {
            schema  => 'str*',
            default => '',
            pos     => 0,
            completion => sub {
                require Complete::Module;
                my %args = @_;
                Complete::Module::complete_module(word=>$args{word});
            },
            tags => ['category:filtering'],
        },
        pm => {
            summary => 'List .pm files',
            schema  => 'bool',
            default => 1,
            tags => ['category:filtering'],
        },
        pod => {
            summary => 'List .pod files',
            schema  => 'bool',
            default => 0,
            tags => ['category:filtering'],
        },
        prefix => {
            summary => 'List prefixes (dirs)',
            schema  => 'bool',
            default => 0,
            tags => ['category:filtering'],
        },
        xs => {
            summary => 'Only list XS modules',
            'summary.alt.bool.not' => 'Only list PP (pure-perl) modules',
            schema  => 'bool',
            tags => ['category:filtering'],
            cmdline_aliases => {
                pp => {
                    summary => 'Alias for --no-core',
                    is_flag => 1,
                    code => sub { $_[0]{xs} = 0 },
                },
            },
        },
        core => {
            summary => 'Only list core modules',
            'summary.alt.bool.not' => 'Only list non-core modules',
            schema  => 'bool',
            tags => ['category:filtering'],
        },
        core_dirs => {
            summary => 'Only search in core directories',
            'summary.alt.bool.not' => 'Only search in non-core directories',
            schema => 'bool',
            tags => ['category:filtering'],
        },
        exclude_curdir => {
            summary => 'Do not include "." in search dir',
            schema => 'bool',
            description => <<'_',

By default, Perl usually adds `.` (the current directory) in the search dir.
This option removes it.

_
            tags => ['category:filtering'],
        },
        recurse => {
            schema  => 'bool',
            cmdline_aliases => { R => {} },
        },
        detail => {
            summary => 'Return detailed records instead of just module names',
            schema  => 'bool',
            cmdline_aliases => { l=>{} },
        },
        with_path => {
            summary => 'Instead of module names, return module paths instead',
            schema => 'bool',
            cmdline_aliases => { x=>{} },
        },
        ls_mode => {
            schema => 'bool*',
            default => 1,
        },
    },
    args_rels => {
        choose_one => ['detail', 'with_path'],
    },
};
sub pmlist {
    require Module::List::More;
    require String::Wildcard::Bash;

    my %args = @_;

    require Module::CoreList::More if defined($args{core}) || $args{detail};
    require Module::XSOrPP if defined($args{xs}) || $args{detail};

    my $query = $args{query} // "";

    local @INC = @INC;
    @INC = do {
        no warnings 'once';
        require Config;
        @Config::Config{qw(privlibexp archlibexp)};
    } if $args{core_dirs};
    @INC = grep { $_ ne '.' } @INC if $args{exclude_curdir};

    my $mods = Module::List::More::list_modules(
        $query,
        {
            return_path   => 1,
            wildcard      => 1,
            list_prefixes => $args{prefix},
            list_modules  => $args{pm},
            list_pod      => $args{pod},
            recurse       => $args{recurse},
            ls_mode       => $args{ls_mode},
        });
    my @res;
  MOD:
    for my $mod (sort keys %$mods) {
        my $is_core;
        if (defined $args{core}) {
            $is_core = Module::CoreList::More->is_core($mod);
            next MOD if $args{core} xor $is_core;
        }
        my $is_xs;
        my $is_xs_calculated;
        if (defined $args{xs}) {
            $is_xs = Module::XSOrPP::is_xs($mod);
            $is_xs_calculated++;
            next MOD if $args{xs} xor $is_xs;
        }

        if ($args{detail}) {
            push @res, {
                module  => $mod,
                path    => $mods->{$mod}{module_path},
                is_core => $is_core // Module::CoreList::More->is_core($mod),
                is_xs   => $is_xs_calculated ? $is_xs : Module::XSOrPP::is_xs($mod),
            };
        } else {
            push @res, $args{with_path} ? $mods->{$mod} : $mod;
        }
    }
    my $meta = {};
    if ($args{detail}) {
        $meta->{'table.fields'} = [qw/module path is_core is_xs/];
    }
    [200, "OK", \@res, $meta];
}

Perinci::CmdLine::Any->new(
    url => '/main/pmlist',
    read_config => 0,
    read_env => 0,
)->run;

# ABSTRACT:
# PODNAME:

=head1 SYNOPSIS

Basic usage:

 % pmlist Mo      ; # search Mo.pm
 % pmlist Mo::    ; # search one level deep
 % pmlist Mo:: -R ; # search recursively (multiple levels)

 % pmlist Type::Tiny -R --pod        ; # search .pm as well as .pod
 % pmlist Type::Tiny -R --pod --nopm ; # search .pod only

Wildcard:

 % pmlist Module::P*
 % pmlist Module/P**
 % pmlist **::Tiny
